list.of.packages <- c("tidyverse", "haven", "lme4", "lmerTest", "sjPlot", "modelsummary", "rstudioapi", "brms")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(haven)  # for importing SPSS/SAS/Stata data
library(lme4)  # for multilevel analysis
library(lmerTest)  # for testing coefficients
library(sjPlot)  # for plotting effects
library(modelsummary)  # for making tables
library(rstudioapi)
library(lattice) #for qq plots
library(MuMIn)
# library(ggpval)
library(ggpubr)
theme_set(theme_bw())  # Theme; just my personal preference
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
# print( getwd() )
# df_raw_responses <- read_csv("../data/target/posting_frequency/group_annotations_responses.csv")
df_raw_responses2 <- read_csv("../../Reddit-Server/data/target/posting_frequency/group_annotations_responses.csv")
df_raw_responses <- read_csv("../data/target/posting_frequency/group_annotations_responses2.csv")
df_raw_responses$abc
#create centered level-1 predictor and cluster means
df_responses <- df_raw_responses %>%
filter(between(score, quantile(score, 0.001), quantile(score, 0.999))) %>% #remove outliers (0.1% most extreme values)
group_by(subreddit) %>%
dplyr::mutate(n_obs = n()) %>%
dplyr::ungroup() %>%
dplyr::mutate(incivility_cmc = incivility - avg_SRI) %>%
dplyr::mutate(commentID = row_number()) %>%
dplyr::mutate(across(c(Group, Group_parent, incivility_parent), factor))
#log modulus transformation of karma
#scaling
df_scaled_responses <- df_responses %>% mutate(log_score = scale(sign(score) * log(abs(score) + 1)),
log_parent_score = scale(sign(parent_score) * log(abs(parent_score) + 1)),
log_parent_comments = scale(sign(parent_num_comments) * log(abs(parent_num_comments) + 1)))
# if too much data, run trials on sample before fitting the model on all data
set.seed(0)
df_sample_responses <- df_scaled_responses %>% filter(Group != 0, Group_parent != 0, user_id != "AutoModerator") %>% # remove bystanders and bots
group_by(Group, Group_parent) %>%
slice_sample(prop = 1) %>% ungroup() %>% group_by(subreddit) %>%
dplyr::mutate(n_obs = n()) %>% filter(n_obs > 4)%>% ungroup() %>% # There need to be at least 5 responses/comments to count as conflict
filter(!is.na(log_parent_comments)) %>%
dplyr::mutate(commentID = row_number()) %>%
mutate(Group = factor(Group, labels = c("Defender", "Attacker")), Group_parent = factor(Group_parent, labels = c("Defender", "Attacker")),
incivility = factor(incivility, labels=c("civil", "uncivil")))
df_plot <- data_summary(df_sample_responses, varname="score", groupnames=c("Group", "Group_parent"))
df_plot <- df_plot %>% mutate(Group = as.factor(Group), Group_parent = as.factor(Group_parent))
p1 <- ggplot(df_plot, aes(x=Group, y=score, fill=factor(Group_parent, labels= c("Defenders", "Attackers")))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_x_discrete(labels=c("Defenders", "Attackers")) +
geom_errorbar(aes(ymin=score-se, ymax=score+se), width=.2,
position=position_dodge(.9)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
xlab("Commenters' Group Membership") + ylab("Average Karma") + labs(fill = "Parent commenters group") +
ggtitle("Comparison of Karma over commenter and responder groups")
# create new factor variables
p1_sig <- ggbarplot(df_sample_responses, x = "Group", y = "score", add = "mean_se",
fill = "Group_parent", palette = "jco", legend.title="Parent comments' group",
position = position_dodge(0.8)) + labs(fill = "Parent commenters' group") + xlab("Commenters' Group") +
stat_compare_means(aes(group = Group_parent), label = "p.signif", label.y = 15)
p1
# add significance lines -> check method!!
# most likes for defenders confirming each other (sig from all others)
# then defending against outgroup (sig compared to attackers with each other)
# then (equally strongly) attacking outgroup
# last, attackers confirming each other
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
se = sd(x[[col]], na.rm=TRUE)/sqrt(nrow(x)))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df_plot <- data_summary(df_sample_responses, varname="score", groupnames=c("Group", "Group_parent"))
df_plot <- df_plot %>% mutate(Group = as.factor(Group), Group_parent = as.factor(Group_parent))
p1 <- ggplot(df_plot, aes(x=Group, y=score, fill=factor(Group_parent, labels= c("Defenders", "Attackers")))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_x_discrete(labels=c("Defenders", "Attackers")) +
geom_errorbar(aes(ymin=score-se, ymax=score+se), width=.2,
position=position_dodge(.9)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
xlab("Commenters' Group Membership") + ylab("Average Karma") + labs(fill = "Parent commenters group") +
ggtitle("Comparison of Karma over commenter and responder groups")
# create new factor variables
p1_sig <- ggbarplot(df_sample_responses, x = "Group", y = "score", add = "mean_se",
fill = "Group_parent", palette = "jco", legend.title="Parent comments' group",
position = position_dodge(0.8)) + labs(fill = "Parent commenters' group") + xlab("Commenters' Group") +
stat_compare_means(aes(group = Group_parent), label = "p.signif", label.y = 15)
p1
# add significance lines -> check method!!
# most likes for defenders confirming each other (sig from all others)
# then defending against outgroup (sig compared to attackers with each other)
# then (equally strongly) attacking outgroup
# last, attackers confirming each other
df_plot <- data_summary(df_sample_responses, varname="score", groupnames=c("Group", "Group_parent", "incivility_parent"))
df_plot <- df_plot %>% mutate(incivility_parent = as.factor(incivility_parent), Group_parent = as.factor(Group_parent))
ggplot(df_plot, aes(x=Group_parent, y=score, fill=factor(incivility_parent, labels= c("Civil", "Uncivil")))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_x_discrete(labels=c("Defenders", "Attackers")) +
geom_errorbar(aes(ymin=score-se, ymax=score+se), width=.2,
position=position_dodge(.9)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
xlab("Parent commenters' Group Membership") + ylab("Average Karma") + labs(fill = "Parent commenters' civility") +
ggtitle("Comparison of Karma over commenter and responder groups")  + facet_wrap(~Group)
# responding to a civil defender gives more likes than an uncivil one for attackers -> interesting
# responding to an uncivil attacker gives more likes for defenders compared to attacking an uncivil defender for attackers
#
# compare the groups like in the t.tests
# create new factor variables -> fix this
ggbarplot(df_sample_responses, x = "Group_parent", y = "score", add = "mean_se",
fill = "incivility", group = "incivility", palette = "jco", legend.title="Comments' incivility",
position = position_dodge(0.8)) + labs(fill = "Comments' incivility") + xlab("Parent commenters' Group") +
facet_grid(~ Group)
# stat_compare_means(aes(group = incivility), label = "p.signif", label.y = c(15, 20))
df_plot <- data_summary(df_sample_responses, varname="score", groupnames=c("Group", "incivility"))
df_plot <- df_plot %>% mutate(incivility = as.factor(incivility), Group = as.factor(Group))
df_plot <- df_plot[df_plot$Group == "Defender", ]
ggplot(df_plot, aes(x=incivility, y=score)) +
geom_bar(stat="identity", position=position_dodge()) +
# scale_x_discrete(labels=c("Defenders", "Attackers")) +
geom_errorbar(aes(ymin=score-se, ymax=score+se), width=.2,
position=position_dodge(.9)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
xlab("Commenters' Group Membership") + ylab("Average Karma") +
ggtitle("Comparison of Defender's Karma for civil vs uncivil comments")
# uncivil comments get generally more likes
df_sample_responses %>% filter(Group == "Defender") %>% mutate(incivility = factor(incivility)) %>%
ggplot(aes(x=incivility, y=log_score)) + geom_violin()
ggplot(df_plot, aes(x=incivility, y=score)) +
geom_bar(stat="identity", position=position_dodge(), fill = "blue") +
# scale_x_discrete(labels=c("Defenders", "Attackers")) +
geom_errorbar(aes(ymin=score-se, ymax=score+se), width=.2,
position=position_dodge(.9)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
xlab("Commenters' Group Membership") + ylab("Average Karma") +
ggtitle("Comparison of Defender's Karma for civil vs uncivil comments")
ggplot(df_plot, aes(x=incivility, y=score)) +
geom_bar(stat="identity", position=position_dodge(), fill = "darkblue") +
# scale_x_discrete(labels=c("Defenders", "Attackers")) +
geom_errorbar(aes(ymin=score-se, ymax=score+se), width=.2,
position=position_dodge(.9)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
xlab("Commenters' Group Membership") + ylab("Average Karma") +
ggtitle("Comparison of Defender's Karma for civil vs uncivil comments")
ggplot(df_plot, aes(x=incivility, y=score)) +
geom_bar(stat="identity", position=position_dodge(), fill = "steelblue") +
# scale_x_discrete(labels=c("Defenders", "Attackers")) +
geom_errorbar(aes(ymin=score-se, ymax=score+se), width=.2,
position=position_dodge(.9)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
xlab("Commenters' Group Membership") + ylab("Average Karma") +
ggtitle("Comparison of Defender's Karma for civil vs uncivil comments")
ggplot(df_plot, aes(x=incivility, y=score, fill=incivility)) +
geom_bar(stat="identity", position=position_dodge(), fill = "steelblue") +
# scale_x_discrete(labels=c("Defenders", "Attackers")) +
geom_errorbar(aes(ymin=score-se, ymax=score+se), width=.2,
position=position_dodge(.9)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
xlab("Commenters' Group Membership") + ylab("Average Karma") +
ggtitle("Comparison of Defender's Karma for civil vs uncivil comments")
ggplot(df_plot, aes(x=incivility, y=score, fill=incivility)) +
geom_bar(stat="identity", position=position_dodge()) +
# scale_x_discrete(labels=c("Defenders", "Attackers")) +
geom_errorbar(aes(ymin=score-se, ymax=score+se), width=.2,
position=position_dodge(.9)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
xlab("Commenters' Group Membership") + ylab("Average Karma") +
ggtitle("Comparison of Defender's Karma for civil vs uncivil comments")
ggplot(df_plot, aes(x=incivility, y=score, fill=incivility)) +
geom_bar(stat="identity", position=position_dodge()) +
# scale_x_discrete(labels=c("Defenders", "Attackers")) +
geom_errorbar(aes(ymin=score-se, ymax=score+se), width=.2,
position=position_dodge(.9)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
xlab("Commenters' Group Membership") + ylab("Average Karma") + theme_bw() +
ggtitle("Comparison of Defender's Karma for civil vs uncivil comments")
ggplot(df_plot, aes(x=incivility, y=score, fill=incivility)) +
geom_bar(stat="identity", position=position_dodge()) +
# scale_x_discrete(labels=c("Defenders", "Attackers")) +
geom_errorbar(aes(ymin=score-se, ymax=score+se), width=.2,
position=position_dodge(.9)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
xlab("Commenters' Group Membership") + ylab("Average Karma") +
ggtitle("Comparison of Defender's Karma for civil vs uncivil comments")
ggtitle("Comparison of Defender's Karma for civil vs uncivil comments")
ggplot(df_plot, aes(x=incivility, y=score, fill=incivility)) +
geom_bar(stat="identity", position=position_dodge()) +
# scale_x_discrete(labels=c("Defenders", "Attackers")) +
geom_errorbar(aes(ymin=score-se, ymax=score+se), width=.2,
position=position_dodge(.9)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
xlab("Commenters' Group Membership") + ylab("Average Karma") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
ggtitle("Comparison of Defender's Karma for civil vs uncivil comments")
setwd("H:/My Drive/PhD/Research/biased_ai/Experiments/annotations/codes")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
df <- read.csv("../results/mfrc_labels_full.csv")
View(df)
df <- read.csv("../results/mfrc_final_full.csv")
lm <- lm(labels ~ annotator, df)
df$labels
lm <- lm(success ~ annotator, df)
df$success
lm <- lm(success ~ annotator, df)
lm <- glm(success ~ annotator, data = df, family = 'binomial')
df$success
lm <- glm(as.factor(success) ~ annotator, data = df, family = 'binomial')
as.factor(success)
as.factor(df$success)
summary(lm)
meta <- read.csv(mfrc_annotators_pv.csv)
meta <- read.csv("../results/(mfrc_annotators_pv.csv")
meta <- read.csv("../results/mfrc_annotators_pv.csv")
meta <- read.csv("../data/mfrc_annotators_pv.csv")
meta.head()
head(meta)
meta$ID
df$annotator
unique(df$annotator)
meta$ID
unique(df$annotator)
unique(df$tweet_id)
meta <- read.csv("../data/mftc_annotators_pv.csv")
df <- read.csv("../results/mftc_final_full.csv")
meta <- read.csv("../data/mftc_annotators_pv.csv")
meta <- read.csv("../data/mfrc_annotators_pv.csv")
lm <- glm(as.factor(success) ~ annotator, data = df, family = 'binomial')
summary(lm)
df <- read.csv("../results/mftc_final_full.csv")
unique(df$annotator)
View(meta)
df$annotator
meta$individualism
meta$id
meta$ID
meta <- meta %>% mutate(annotator = paste("annotator0", ID))
meta$annotator
meta <- meta %>% mutate(annotator = paste("annotator0", str(ID))
meta <- meta %>% mutate(annotator = paste("annotator0", str(ID)))
meta$ID
meta$ID[1]
paste("0", meta$ID[1])
paste("0", as.character(meta$ID[1]))
meta <- meta %>% mutate(annotator = paste("annotator0", ID, sep = "")))
meta <- meta %>% mutate(annotator = paste("annotator0", ID, sep = ""))
meta$annotator
sprintf("%08d", meta$ID)
sprintf("%01d", meta$ID)
meta <- meta %>% mutate(annotator = paste("annotator0", sprintf("%01d", ID), sep = ""))
meta$annotator
meta <- meta %>% mutate(annotator = paste("annotator", sprintf("%01d", ID), sep = ""))
meta$annotator
merge(df, meta, by = "annotator")
unique(meta$annotator)
unique(df$annotator)
sprintf("%01d", ID)
sprintf("%01d", meta$ID)
sprintf("%02d", meta$ID)
meta <- meta %>% mutate(annotator = paste("annotator", sprintf("%02d", ID), sep = ""))
df <- merge(df, meta, by = "annotator")
df <- read.csv("../results/mftc_final_full.csv")
meta <- read.csv("../data/mfrc_annotators_pv.csv")
meta <- meta %>% mutate(annotator = paste("annotator", sprintf("%02d", ID), sep = ""))
df <- merge(df, meta, by = "annotator")
View(df)
View(meta)
lm <- glm(as.factor(success) ~ annotator, data = df, family = 'binomial')
summary(lm)
lm_demo <- glm(as.factor(success) ~ gender, data = df, family = 'binomial')
lm_demo <- glm(as.factor(success) ~ sex, data = df, family = 'binomial')
summary(lm)
summary(lm_demo)
exp(-0.4)
lm_demo <- glm(as.factor(success) ~ sex + age + religion, data = df, family = 'binomial')
summary(lm_demo)
unique(meta$age)
df <- merge(df, meta, by = "annotator")
```
df <- read.csv("../results/mftc_final_full.csv")
meta <- read.csv("../data/mfrc_annotators_pv.csv")
meta <- read.csv("../data/meta/mfrc_annotators_pv.csv")
df <- read.csv("../results/mftc_final_full.csv")
meta <- read.csv("../data/meta/mfrc_annotators_pv.csv")
meta <- meta %>% mutate(annotator = paste("annotator", sprintf("%02d", ID), sep = ""))
# preprocess meta data (age to numeric, etc.)
df <- merge(df, meta, by = "annotator")
lm <- glm(as.factor(success) ~ annotator, data = df, family = 'binomial')
setwd("H:/My Drive/PhD/Research/biased_ai/Experiments/annotations/codes")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
df <- read.csv("../results/mftc_final_full.csv")
results_path = corp
corp = "mftc"
type = "normal"
mode = "full"
results_path = corp
corp + type
results_path = paste(corp, type, mode)
results_path
paste(corp, "labels", type, mode, ".csv", sep="_")
corp = "mftc"
type = "normal"
mode = "full"
results_path = paste(corp, "labels", type, mode, ".csv", sep="_")
results_path
results_path = paste(paste(corp, "labels", type, mode, sep="_"), ".csv", sep=")"
results_path
results_path = paste(paste(corp, "labels", type, mode, sep="_"), ".csv", sep="")
corp = "mftc"
type = "normal"
mode = "full"
results_path = paste(paste(corp, "labels", type, mode, sep="_"), ".csv", sep="")
results_path
evals_dir = "../results/evals/"
corp = "mftc"
type = "normal"
mode = "full"
results_path = paste(evals_dir, paste(corp, "labels", type, mode, sep="_"), ".csv", sep="")
results_path
df <- read.csv(results_path) # load predictions
evals_dir = "../results/evals/"
corp = "mftc"
type = "normal"
mode = "full"
results_path = paste(evals_dir, paste(corp, "success", type, mode, sep="_"), ".csv", sep="")
df <- read.csv(results_path) # load predictions
df <- read.csv(results_path) # load predictions
meta <- read.csv("../data/meta/mfrc_annotators_pv.csv")
meta <- meta %>% mutate(annotator = paste("annotator", sprintf("%02d", ID), sep = ""))
# preprocess meta data (age to numeric, etc.)
df <- merge(df, meta, by = "annotator")
df
View(df)
df <- read.csv(results_path) # load predictions
meta <- read.csv("../data/meta/mfrc_annotators_pv.csv")
meta <- meta %>% mutate(annotator = paste("annotator", sprintf("%02d", ID), sep = ""))
# preprocess meta data (age to numeric, etc.)
View(df)
df <- read.csv(results_path) # load predictions
evals_dir = "../results/evals/"
corp = "mftc"
type = "normal"
mode = "full"
results_path = paste(evals_dir, paste(corp, "success", type, mode, sep="_"), ".csv", sep="")
evals_dir = "../results/evals/"
corp = "mftc"
type = "normal"
mode = "full"
results_path = paste(evals_dir, paste(corp, "success", type, mode, sep="_"), ".csv", sep="")
df <- read.csv(results_path) # load predictions
View(df)
results_path
View(df)
df <- read.csv(results_path) # load predictions
meta <- read.csv("../data/meta/mfrc_annotators_pv.csv")
meta <- meta %>% mutate(annotator = paste("annotator", sprintf("%02d", ID), sep = ""))
df <- merge(df, meta, by = "annotator")
evals_dir = "../results/evals/"
corp = "mfrc"
type = "normal"
mode = "full"
results_path = paste(evals_dir, paste(corp, "success", type, mode, sep="_"), ".csv", sep="")
df <- read.csv(results_path) # load predictions
meta <- read.csv("../data/meta/mfrc_annotators_pv.csv")
meta <- meta %>% mutate(annotator = paste("annotator", sprintf("%02d", ID), sep = ""))
# preprocess meta data (age to numeric, etc.)
df <- merge(df, meta, by = "annotator")
lm <- glm(as.factor(success) ~ annotator, data = df, family = 'binomial')
summary(lm)
lm_demo <- glm(as.factor(success) ~ sex + age + religion, data = df, family = 'binomial')
summary(lm_demo)
df$age <- as.numeric(gsub("([0-9]+).*$", "\\1", df$age))
df$age
lm_demo <- glm(as.factor(success) ~ sex + age + religion, data = df, family = 'binomial')
summary(lm_demo)
exp(0.05)
lm_demo <- glm(as.factor(success) ~ sex + as.factor(age) + religion, data = df, family = 'binomial')
summary(lm_demo)
lm_demo <- glm(as.factor(success) ~ sex + age + religion, data = df, family = 'binomial')
summary(lm_demo)
exp(0.8)
10^0.8
exp(1.08)
exp(.23)
exp(.41)
exp(.8)
exp(.39)
exp(0.05)
exp(0.8)
View(df)
df <- read.csv(results_path) # load predictions
df <- df %>% rename(pred_care = care)
df
View(df)
View(df)
df <- df %>% rename(pred_care = care, pred_equality = equality, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_proportionality = proportionality, pred_thin = thin.morality, pred_non = non.moral)
df <- read.csv(results_path) # load predictions
df <- df %>% rename(pred_care = care, pred_equality = equality, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_proportionality = proportionality, pred_thin = thin.morality, pred_non = non.moral)
meta <- read.csv("../data/meta/mfrc_annotators_pv.csv")
meta <- meta %>% mutate(annotator = paste("annotator", sprintf("%02d", ID), sep = ""))
df <- merge(df, meta, by = "annotator")
View(df)
lm_demo <- glm(as.factor(success) ~ sex + age + religion + race, data = df, family = 'binomial')
summary(lm_demo)
df <- read.csv(results_path) # load predictions
df <- df %>% rename(pred_care = care, pred_equality = equality, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_proportionality = proportionality, pred_thin = thin.morality, pred_non = non.moral)
meta <- read.csv("../data/meta/mfrc_annotators_pv.csv")
meta <- meta %>% mutate(annotator = paste("annotator", sprintf("%02d", ID), sep = ""))
# preprocess meta data (age to numeric, etc.)
df <- merge(df, meta, by = "annotator")
```{r}
df$age <- as.numeric(gsub("([0-9]+).*$", "\\1", df$age))
lm <- glm(as.factor(success) ~ annotator, data = df, family = 'binomial')
lm_demo <- glm(as.factor(success) ~ sex + age + religion + race, data = df, family = 'binomial')
summary(lm)
summary(lm_demo)
unique(df$race)
lm_demo <- glm(as.factor(success) ~ sex + age + religion + race + care, data = df, family = 'binomial')
summary(lm_demo)
View(df)
unique(df$care)
lm_demo <- glm(as.factor(success) ~ sex + age + religion + care, data = df, family = 'binomial')
summary(lm_demo)
lm_mfq <- glm(as.factor(success) ~ care + equality + proportionality + loyalty + authority + purity, data = df, family = 'binomial')
summary(lm_mfq)
type = "cross"
evals_dir = "../results/evals/"
corp = "mfrc"
type = "cross"
mode = "full"
results_path = paste(evals_dir, paste(corp, "success", type, mode, sep="_"), ".csv", sep="")
df <- read.csv(results_path) # load predictions
df <- read.csv(results_path) # load predictions
evals_dir = "../results/evals/"
corp = "mfrc"
type = "cross"
mode = "full"
results_path = paste(evals_dir, paste(corp, "success", type, mode, sep="_"), ".csv", sep="")
df <- read.csv(results_path) # load predictions
df <- df %>% rename(pred_care = care, pred_equality = equality, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_proportionality = proportionality, pred_thin = thin.morality, pred_non = non.moral)
df <- read.csv(results_path) # load predictions
if (condition) {
df <- df %>% rename(pred_care = care, pred_equality = equality, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_proportionality = proportionality, pred_thin = thin.morality, pred_non = non.moral)
} else {
df <- df %>% rename(pred_care = care, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_thin = thin.morality, pred_non = non.moral)
}
df <- read.csv(results_path) # load predictions
if (corp == "mfrc") {
df <- df %>% rename(pred_care = care, pred_equality = equality, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_proportionality = proportionality, pred_thin = thin.morality, pred_non = non.moral)
} else {
df <- df %>% rename(pred_care = care, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_thin = thin.morality, pred_non = non.moral)
}
df <- read.csv(results_path) # load predictions
if (type != "cross") {
df <- df %>% rename(pred_care = care, pred_equality = equality, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_proportionality = proportionality, pred_thin = thin.morality, pred_non = non.moral)
} else {
df <- df %>% rename(pred_care = care, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_thin = thin.morality, pred_non = non.moral)
}
df <- read.csv(results_path) # load predictions
if (type != "cross") {
df <- df %>% rename(pred_care = care, pred_equality = equality, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_proportionality = proportionality, pred_thin = thin.morality, pred_non = non.moral)
} else {
df <- df %>% rename(pred_care = care, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_non = non.moral)
}
meta <- read.csv("../data/meta/mfrc_annotators_pv.csv")
meta <- meta %>% mutate(annotator = paste("annotator", sprintf("%02d", ID), sep = ""))
# preprocess meta data (age to numeric, etc.)
df <- merge(df, meta, by = "annotator")
df$age <- as.numeric(gsub("([0-9]+).*$", "\\1", df$age))
lm <- glm(as.factor(success) ~ annotator, data = df, family = 'binomial')
lm_demo <- glm(as.factor(success) ~ sex + age + religion, data = df, family = 'binomial')
lm_mfq <- glm(as.factor(success) ~ care + equality + proportionality + loyalty + authority + purity, data = df, family = 'binomial')
summary(lm)
summary(lm_demo)
summary(lm_mfq)
evals_dir = "../results/evals/"
corp = "mftc"
type = "cross"
mode = "full"
results_path = paste(evals_dir, paste(corp, "success", type, mode, sep="_"), ".csv", sep="")
df <- read.csv(results_path) # load predictions
if (type != "cross") {
df <- df %>% rename(pred_care = care, pred_equality = equality, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_proportionality = proportionality, pred_thin = thin.morality, pred_non = non.moral)
} else {
df <- df %>% rename(pred_care = care, pred_loyalty = loyalty, pred_authority = authority,
pred_purity = purity, pred_non = non.moral)
}
meta <- read.csv("../data/meta/mfrc_annotators_pv.csv")
meta <- meta %>% mutate(annotator = paste("annotator", sprintf("%02d", ID), sep = ""))
# preprocess meta data (age to numeric, etc.)
df <- merge(df, meta, by = "annotator")
df$age <- as.numeric(gsub("([0-9]+).*$", "\\1", df$age))
lm <- glm(as.factor(success) ~ annotator, data = df, family = 'binomial')
lm_demo <- glm(as.factor(success) ~ sex + age + religion, data = df, family = 'binomial')
lm_mfq <- glm(as.factor(success) ~ care + equality + proportionality + loyalty + authority + purity, data = df, family = 'binomial')
summary(lm_demo)
summary(lm_mfq)
